# -*- eval: (visual-line-mode -1); -*-
#+author: rennsax
#+startup: indent show2levels

#+html: <div align="center"><h1>Celeste Emacs</h1>
#+html: <img src="https://static.miraheze.org/celestewiki/a/ac/Strawberry_flap.gif"alt="celeste strawberry"/>
#+html: <p>Simple, lightweight and bespoked Emacs configurations.</p>
#+html: </div>

--------------

* Installation

Emacs requires C/C++ compiler suites, including a compiler, ~make~, ~cmake~.

** Emacs

You can get the source code for Emacs [[http://ftpmirror.gnu.org/emacs][here]]. Either use ~curl -sSLO~ or ~wget~.

*** macOS

Directly installed from Homebrew's default formulae is OK, but you may get an
Emacs without some essential new features, such as native compilation. I
recommend installing a third-party distributed Emacs bundles such as
[[https://github.com/d12frosted/homebrew-emacs-plus.git][d12frosted/homebrew-emacs-plus]].

#+begin_src shell
brew install make cmake
# Additional arguments are passed to ./configure
brew install emacs-plus@29 \
     --with-native-comp --with-imagemagick
#+end_src

You can also pick your favorite icon [[https://github.com/d12frosted/homebrew-emacs-plus#icons][here]].

** Hard Dependencies

Hard dependencies are external tools that are required by some Emacs packages.
To use these packages, you need first install the corresponding tools with your
favorite package manager on your platform (such as ~homebrew~ on macOS, ~apt~ on
Ubuntu).

Hard dependencies are listed here. An asterisk symbol indicates that the tool is
optional for the package(s).

| Tool         | Used by           | Description                                 |
|--------------+-------------------+---------------------------------------------|
| [[https://man-db.nongnu.org/][man-db]]       | man               | macOS. Most GNU/Linux distros have builtin. |
| [[https://github.com/BurntSushi/ripgrep][ripgrep]]      | consult, deadgrep | Another Rust winner!                        |
| [[https://github.com/sharkdp/fd][fd]]           | consult           | ~find(1)~'s alternative.                    |
| [[https://pandoc.org/][pandoc]]       | org-pandoc-import | Required.                                   |
| [[https://www.gimp.org/][gimp]]*        | org-download      | Used by ~org-download-edit~.                |
| [[https://github.com/AbiWord/enchant][libenchant]]   | jinx              | Spell checker.                              |
| [[https://www.leonerd.org.uk/code/libvterm/][libvterm]]     | vterm             | Terminal emulator in Emacs.                 |
| [[https://github.com/laishulu/macism][macism]]       | sis               | macOS.                                      |
| [[https://www.libreoffice.org/discover/libreoffice/][LibreOffice]]* | doc-view[fn:1]    | For previewing documents.                   |

[fn:1] For more dependencies of doc-view package, use ~M-x find-library doc-view~.

*** macOS

#+begin_src shell
# Basic dependencies.
brew install man-db ripgrep fd pandoc
# LaTeX.
brew install --cask mactex      # or, of course, mactex-no-gui
# Extra dependencies for various packages.
brew install enchant libvterm
# For emacs-smart-input-source.
brew tap laishulu/macism && brew install macism
# For doc-view
brew install --cask libreoffice
#+end_src

** Fonts

Here lists the fonts that I personally use.

- [[https://monaspace.githubnext.com/][Monaspice]]: An innovative superfamily of fonts for code.
- [[https://github.com/tonsky/FiraCode][FiraCode]]: Free monospaced font with programming ligatures.
- [[https://github.com/laishulu/Sarasa-Term-SC-Nerd][更纱黑体]]: 极少数中英文宽度严格 2:1 的字体，适用于解决 org-table 对齐问题。

** Python Environment

If you want to use other brilliant plugins like [[https://github.com/manateelazycat/lsp-bridge][lsp-bridge]] and [[https://github.com/emacs-eaf/emacs-application-framework.git][EAF]] that are
based on a Python environment, some Python packages are also necessary. I
recommend manage the dedicated Python environment with venv. You can also choose
your favorite way, such as with conda, or even barely. Here is my way:

#+begin_src shell
# Make sure you have venv package is installed.
# sudo apt install python3-venv -y

python3 -m venv .venv
source .venv/bin/activate
# Use `deactivate` to deactivate the venv
#+end_src

Run ~which python3~ to see where the Python3 executable is located. You may need
to change corresponding Emacs variables to make the virtual environment take
effects. For example:

#+begin_src emacs-lisp
(setq lsp-bridge-python-command "Your Python executable path")
#+end_src

Or you can leverage the customizable variable =celeste-python-command=:

#+begin_src emacs-lisp
(setopt celeste-python-command "Your Python executable path")
#+end_src

*** lsp-bridge

#+begin_src shell
pip3 install epc orjson sexpdata six setuptools paramiko rapidfuzz
#+end_src

** Optional

[[https://orgmode.org/org.html#Installation][Install org-mode manually]], for those who are interested in the newest features.

#+begin_src shell
cd ~/.config/emacs/pacakges
git clone https://git.savannah.gnu.org/git/emacs/org-mode.git
cd org-mode/
make autoloads # This is mandatory.
make compile # Highly recommended, since org-mode contains a lot of functions.
#+end_src

* Misc.

** Map CapsLock to Ctrl

It's known that Emacs users (who respect vanilla key bindings) usually suffer
from [[https://en.wikipedia.org/wiki/Repetitive_strain_injury][RIP]] after enjoying their Emacs journey for many years. The core leader of
FSF, Richard Stallman, almost lost his ability to type because of RIP. See [[http://xahlee.info/emacs/emacs/emacs_hand_pain_celebrity.html][this
interesting post]]. For those who rely on their typing skills to make a living,
it's rather important to take care of the finger health.

There are many suggestions for protecting your fingers from RIP. The most
famous, or simplest suggestion, is *to map CapsLock key to Ctrl*. Emacs key
bindings heavily reply on the Ctrl key, but the key is so far from our fingers
while typing.

On macOS, we can easily set this: System Settings > Keyboard > Keyboard
Shortcuts > Modifier Keys. You can also use the powerful [[https://github.com/pqrs-org/Karabiner-Elements][Karabiner-Elements]] to
configure your keyboard completely, which is my choice.

On Windows, you may find a lot of people teaching you to modify the Registry.
It's too complicated for me, though. I prefer to use [[https://learn.microsoft.com/en-us/windows/powertoys/][Microsoft PowerToys]] to
customize the keyboard.

On Linux, the routines vary from distros.
- Ubuntu: Gnome Tweaks (~gnome-tweaks~ from the cmd) -> Additional Layout
  Options -> Ctrl position -> Caps Lock as Ctrl.

* Copyright Notice

The banner under the project name is a work from Celeste game asset, borrowed
from [[https://github.com/laishulu/emacs-smart-input-source][Celeste Wiki]], and licensed under [[https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en][CC BY-NC-SA 4.0 License]]. You may not use
the material for commercial purposes.

I use this banner just because I'm a huge fan of Celeste game. If my actions
infringe on any copyrights, please contact me and I will remove it. Thank a lot.
